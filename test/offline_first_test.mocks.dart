// Mocks generated by Mockito 5.4.6 from annotations
// in dicume_app/test/offline_first_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:connectivity_plus/connectivity_plus.dart' as _i10;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i11;
import 'package:dicume_app/core/database/database.dart' as _i9;
import 'package:dicume_app/core/services/database_service.dart' as _i8;
import 'package:dicume_app/data/datasources/alimento_remote_datasource.dart'
    as _i2;
import 'package:dicume_app/data/datasources/auth_local_datasource.dart' as _i5;
import 'package:dicume_app/data/models/alimento_model.dart' as _i4;
import 'package:dicume_app/data/models/auth_model.dart' as _i7;
import 'package:dicume_app/data/models/user_model.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AlimentoRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlimentoRemoteDataSource extends _i1.Mock
    implements _i2.AlimentoRemoteDataSource {
  MockAlimentoRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.AlimentoModel>> getAllAlimentos() =>
      (super.noSuchMethod(
            Invocation.method(#getAllAlimentos, []),
            returnValue: _i3.Future<List<_i4.AlimentoModel>>.value(
              <_i4.AlimentoModel>[],
            ),
          )
          as _i3.Future<List<_i4.AlimentoModel>>);
}

/// A class which mocks [AuthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthLocalDataSource extends _i1.Mock
    implements _i5.AuthLocalDataSource {
  MockAuthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> cacheUser(_i6.UserModel? user) =>
      (super.noSuchMethod(
            Invocation.method(#cacheUser, [user]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i6.UserModel?> getCachedUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedUser, []),
            returnValue: _i3.Future<_i6.UserModel?>.value(),
          )
          as _i3.Future<_i6.UserModel?>);

  @override
  _i3.Future<void> clearCachedUser() =>
      (super.noSuchMethod(
            Invocation.method(#clearCachedUser, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> cacheToken(_i7.AuthTokenModel? token) =>
      (super.noSuchMethod(
            Invocation.method(#cacheToken, [token]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i7.AuthTokenModel?> getCachedToken() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedToken, []),
            returnValue: _i3.Future<_i7.AuthTokenModel?>.value(),
          )
          as _i3.Future<_i7.AuthTokenModel?>);

  @override
  _i3.Future<void> clearCachedToken() =>
      (super.noSuchMethod(
            Invocation.method(#clearCachedToken, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> clearAllCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllCache, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i8.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i9.Alimento>> getAllAlimentos() =>
      (super.noSuchMethod(
            Invocation.method(#getAllAlimentos, []),
            returnValue: _i3.Future<List<_i9.Alimento>>.value(<_i9.Alimento>[]),
          )
          as _i3.Future<List<_i9.Alimento>>);

  @override
  _i3.Future<List<_i9.Alimento>> getAlimentosByCategoria(String? categoria) =>
      (super.noSuchMethod(
            Invocation.method(#getAlimentosByCategoria, [categoria]),
            returnValue: _i3.Future<List<_i9.Alimento>>.value(<_i9.Alimento>[]),
          )
          as _i3.Future<List<_i9.Alimento>>);

  @override
  _i3.Future<List<_i9.Alimento>> searchAlimentos(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchAlimentos, [query]),
            returnValue: _i3.Future<List<_i9.Alimento>>.value(<_i9.Alimento>[]),
          )
          as _i3.Future<List<_i9.Alimento>>);

  @override
  _i3.Future<List<_i9.Alimento>> getFavoritosAlimentos() =>
      (super.noSuchMethod(
            Invocation.method(#getFavoritosAlimentos, []),
            returnValue: _i3.Future<List<_i9.Alimento>>.value(<_i9.Alimento>[]),
          )
          as _i3.Future<List<_i9.Alimento>>);

  @override
  _i3.Future<_i9.Alimento?> getAlimentoById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getAlimentoById, [id]),
            returnValue: _i3.Future<_i9.Alimento?>.value(),
          )
          as _i3.Future<_i9.Alimento?>);

  @override
  _i3.Future<int> insertAlimento(_i9.AlimentosCompanion? alimento) =>
      (super.noSuchMethod(
            Invocation.method(#insertAlimento, [alimento]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<bool> updateAlimento(_i9.Alimento? alimento) =>
      (super.noSuchMethod(
            Invocation.method(#updateAlimento, [alimento]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<int> deleteAlimento(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAlimento, [id]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<int> clearAlimentos() =>
      (super.noSuchMethod(
            Invocation.method(#clearAlimentos, []),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<bool> toggleFavoritoAlimento(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#toggleFavoritoAlimento, [id]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<_i9.Refeicoe>> getAllRefeicoes() =>
      (super.noSuchMethod(
            Invocation.method(#getAllRefeicoes, []),
            returnValue: _i3.Future<List<_i9.Refeicoe>>.value(<_i9.Refeicoe>[]),
          )
          as _i3.Future<List<_i9.Refeicoe>>);

  @override
  _i3.Future<List<_i9.Refeicoe>> getRefeicoesByData(DateTime? data) =>
      (super.noSuchMethod(
            Invocation.method(#getRefeicoesByData, [data]),
            returnValue: _i3.Future<List<_i9.Refeicoe>>.value(<_i9.Refeicoe>[]),
          )
          as _i3.Future<List<_i9.Refeicoe>>);

  @override
  _i3.Future<List<_i9.Refeicoe>> getRefeicoesByTipo(String? tipo) =>
      (super.noSuchMethod(
            Invocation.method(#getRefeicoesByTipo, [tipo]),
            returnValue: _i3.Future<List<_i9.Refeicoe>>.value(<_i9.Refeicoe>[]),
          )
          as _i3.Future<List<_i9.Refeicoe>>);

  @override
  _i3.Future<_i9.Refeicoe?> getRefeicaoById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getRefeicaoById, [id]),
            returnValue: _i3.Future<_i9.Refeicoe?>.value(),
          )
          as _i3.Future<_i9.Refeicoe?>);

  @override
  _i3.Future<int> insertRefeicao(_i9.RefeicoesCompanion? refeicao) =>
      (super.noSuchMethod(
            Invocation.method(#insertRefeicao, [refeicao]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<bool> updateRefeicao(_i9.Refeicoe? refeicao) =>
      (super.noSuchMethod(
            Invocation.method(#updateRefeicao, [refeicao]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<int> deleteRefeicao(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRefeicao, [id]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<List<_i9.ItensRefeicaoData>> getItensByRefeicao(int? refeicaoId) =>
      (super.noSuchMethod(
            Invocation.method(#getItensByRefeicao, [refeicaoId]),
            returnValue: _i3.Future<List<_i9.ItensRefeicaoData>>.value(
              <_i9.ItensRefeicaoData>[],
            ),
          )
          as _i3.Future<List<_i9.ItensRefeicaoData>>);

  @override
  _i3.Future<int> insertItemRefeicao(_i9.ItensRefeicaoCompanion? item) =>
      (super.noSuchMethod(
            Invocation.method(#insertItemRefeicao, [item]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<bool> updateItemRefeicao(_i9.ItensRefeicaoData? item) =>
      (super.noSuchMethod(
            Invocation.method(#updateItemRefeicao, [item]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<int> deleteItemRefeicao(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteItemRefeicao, [id]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<String?> getCacheValue(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getCacheValue, [key]),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<void> setCacheValue(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#setCacheValue, [key, value]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<int> deleteCacheValue(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCacheValue, [key]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<Map<String, double>> getResumoNutricionalDia(DateTime? data) =>
      (super.noSuchMethod(
            Invocation.method(#getResumoNutricionalDia, [data]),
            returnValue: _i3.Future<Map<String, double>>.value(
              <String, double>{},
            ),
          )
          as _i3.Future<Map<String, double>>);

  @override
  _i3.Future<List<_i9.RefeicoesPendente>> getAllRefeicoesPendentes() =>
      (super.noSuchMethod(
            Invocation.method(#getAllRefeicoesPendentes, []),
            returnValue: _i3.Future<List<_i9.RefeicoesPendente>>.value(
              <_i9.RefeicoesPendente>[],
            ),
          )
          as _i3.Future<List<_i9.RefeicoesPendente>>);

  @override
  _i3.Future<List<_i9.RefeicoesPendente>> getRefeicoesPendentesSemSync() =>
      (super.noSuchMethod(
            Invocation.method(#getRefeicoesPendentesSemSync, []),
            returnValue: _i3.Future<List<_i9.RefeicoesPendente>>.value(
              <_i9.RefeicoesPendente>[],
            ),
          )
          as _i3.Future<List<_i9.RefeicoesPendente>>);

  @override
  _i3.Future<int> insertRefeicaoPendente(
    _i9.RefeicoesPendentesCompanion? refeicao,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#insertRefeicaoPendente, [refeicao]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<bool> updateRefeicaoPendente(_i9.RefeicoesPendente? refeicao) =>
      (super.noSuchMethod(
            Invocation.method(#updateRefeicaoPendente, [refeicao]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<int> deleteRefeicaoPendente(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRefeicaoPendente, [id]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<int> markRefeicaoAsSyncing(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#markRefeicaoAsSyncing, [id]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<int> clearAllRefeicoesPendentes() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllRefeicoesPendentes, []),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i10.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i11.ConnectivityResult>> get onConnectivityChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onConnectivityChanged),
            returnValue: _i3.Stream<List<_i11.ConnectivityResult>>.empty(),
          )
          as _i3.Stream<List<_i11.ConnectivityResult>>);

  @override
  _i3.Future<List<_i11.ConnectivityResult>> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i3.Future<List<_i11.ConnectivityResult>>.value(
              <_i11.ConnectivityResult>[],
            ),
          )
          as _i3.Future<List<_i11.ConnectivityResult>>);
}
